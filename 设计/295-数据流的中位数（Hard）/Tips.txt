本题中考虑到需要找到中位数，将数据平均的放在一个大顶堆一个小顶堆。这样大顶堆放的就是
对象中较小的数字，小顶堆放的就是较大的数字。这样就可以利用堆顶的两个元素直接求得中位
数。
优先队列默认就是小顶堆。
***************************************************************************************
Java优先队列是构造堆的最好方法；
生成优先队列对象时需要使用比较器：
（1）：覆写Object类的equals（）方法；
（2）：继承Comparable接口，并实现compareTo（）方法；
class BookCook implements Comparable<BookCook>{
  	private String title;
  	private double price;
  	public BookCook(String title,double price){
  		this.title = title;
  		this.price = price;
  	}
 	@Override
 	public String toString() {
 		return "书名："+this.title+",价格："+this.price;
 	}
 	@Override
 	public int compareTo(BookCook o) {
 		if(this.price > o.price){
 			return 1;
 		}else if(this.price < o.price){
 			return -1;
 		}else{
 			return 0;
  		}
  	}
  }



（3）：定义一个单独的对象比较器，继承自Comparator接口，实现compare（）方法。
class Student {
	private String name;
	private double score;
	public Student(String name,double score){
		this.name = name;
		this.score = score;
	}
	public double getScore(){
		return this.score;
	}
	@Override
	public String toString() {
		return "姓名:"+this.name+",分数:"+this.score;
	}

}
class StudentComparator implements Comparator<Student> {
	@Override
	public int compare(Student o1,Student o2) {
		if(o1.getScore() > o2.getScore()){
			return 1;
		}else if(o1.getScore() < o2.getScore()){
			return -1;
		}else{
			return 0;
		}
	}
}
public class TestComparator {

	public static void main(String[] args) {

		Student[] sts = new Student[]{
				new Student("小戴",60),
				new Student("小王",90),
				new Student("老王",80),
				new Student("小萱",95)
		};

		java.util.Arrays.sort(sts, new StudentComparator());
		System.out.println(java.util.Arrays.toString(sts));
	}
}